name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}

    strategy:
      fail-fast: false
      matrix:
        nif: ["2.15"]
        job:
          - { target: aarch64-apple-darwin,      os: macos-14 }
          - { target: x86_64-apple-darwin,       os: macos-13 }
          - { target: x86_64-unknown-linux-gnu,  os: ubuntu-22.04 }
          - { target: x86_64-pc-windows-gnu,     os: windows-2022 }

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config patchelf


      - name: Install Java for macOS (required for extractous)
        if: runner.os == 'macOS'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Add target
        shell: bash
        run: |
          rustup target add ${{ matrix.job.target }}


      - name: Build the project
        id: build-crate
        uses: philss/rustler-precompiled-action@v1.1.4
        with:
          project-name: extractousex_native
          project-version: ${{ env.PROJECT_VERSION }}
          target: ${{ matrix.job.target }}
          nif-version: ${{ matrix.nif }}
          use-cross: ${{ matrix.job.use-cross }}

      - name: Modify archive to fix library paths
        shell: bash
        run: |
          set -euo pipefail

          TEMP_DIR=$(mktemp -d)

          tar -xzf "${{ steps.build-crate.outputs.file-path }}" -C "$TEMP_DIR" || {
              echo "::error::Failed to extract archive"; exit 1;
          }

          NIF_LIB=$(find "$TEMP_DIR" -type f -name "libextractousex_native*") || {
              echo "::error::Failed to search for NIF library"; exit 1;
          }

          if [ -z "$NIF_LIB" ]; then
              echo "::error::Could not find libextractousex_native library in archive"
              exit 1
          fi

          # Find libtika_native library in the build directory (only .so, .dylib, or .dll files)
          TIKA_LIB=$(find target -type f \( -name "libtika_native.so" -o -name "libtika_native.dylib" -o -name "libtika_native.dll" \) -path "*/nativeCompile/*" 2>/dev/null | head -1)
          if [ -z "$TIKA_LIB" ]; then
              TIKA_LIB=$(find target -type f \( -name "libtika_native.so" -o -name "libtika_native.dylib" -o -name "libtika_native.dll" \) -path "*/libs/*" 2>/dev/null | head -1)
          fi

          echo "Found tika library at: $TIKA_LIB"

          if [ -z "$TIKA_LIB" ]; then
              echo "::error::Could not find libtika_native library (.so, .dylib, or .dll)"
              if [ -d "target" ]; then
                  echo "Directory contents of target (all libtika_native files):"
                  find target -type f -name "libtika_native.*" -exec ls -la {} \;
              fi
              exit 1
          fi

          # Copy the tika library to the archive
          cp "$TIKA_LIB" "$TEMP_DIR/$(basename "$TIKA_LIB")"

          # Copy any additional native libraries from extractous
          LIBS=$(find target -type d -path "*/extractous-*/out/libs" 2>/dev/null)
          for dir in $LIBS; do
            if [ -d "$dir" ]; then
              cp -r "$dir"/* "$TEMP_DIR" 2>/dev/null || true
            fi
          done

          # Fix library paths based on platform
          if [[ "${{ matrix.job.target }}" == *darwin* ]]; then
              echo "Fixing macOS library paths..."
              echo "Before modifications:"
              otool -L "$NIF_LIB"

              ORIGINAL_PATHS=$(otool -L "$NIF_LIB" | grep libtika_native | awk '{print $1}')

              while IFS= read -r path; do
                  if [ -n "$path" ]; then
                      echo "Changing path: $path to @loader_path/$(basename "$TIKA_LIB")"
                      install_name_tool -change "$path" "@loader_path/$(basename "$TIKA_LIB")" "$NIF_LIB"
                  fi
              done <<< "$ORIGINAL_PATHS"

              echo "After modifications:"
              otool -L "$NIF_LIB"
          fi

          if [[ "${{ matrix.job.target }}" == *linux* ]]; then
              echo "Fixing Linux library paths..."
              patchelf --set-rpath '$ORIGIN' "$NIF_LIB"
          fi

          # Re-package the archive
          cd "$TEMP_DIR" || exit 1
          tar -czf archive.tar.gz ./* || {
              echo "::error::Failed to create new archive"
              exit 1
          }
          cd - || exit 1

          mv "$TEMP_DIR/archive.tar.gz" "${{ steps.build-crate.outputs.file-path }}" || {
              echo "::error::Failed to move new archive"
              exit 1
          }

          rm -rf "$TEMP_DIR"

      - name: Artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-crate.outputs.file-name }}
          path: ${{ steps.build-crate.outputs.file-path }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.build-crate.outputs.file-path }}
        if: startsWith(github.ref, 'refs/tags/')